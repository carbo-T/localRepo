#include <ros/ros.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/LaserScan.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistStamped.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_datatypes.h>
#include <tf/transform_listener.h>
#include <tf/transform_broadcaster.h>

//从ｘ,y,theta生成tf
double x, y, theta;
tf::Transform t;
t.setOrigin(tf::Vector3(x, y, 0.0));
tf::Quaternion q;
q.setRPY(0.0, 0.0, theta);
t.setRotation(q);

// 发布tf模板
tf::TransformBroadcaster tf_broadcaster_;
tf::Transform transform;
transform.setOrigin( tf::Vector3(0.0, 0.0, 0.0));
transform.setRotation( tf::Quaternion(0, 0, 0, 1));
tf::StampedTransform transform_msg (transform, ros::Time::now(), "map", "base_link");
tf_broadcaster_.sendTransform(transform_msg);

// 读取特定tf
tf::TransformListener    tf_listener_;
ros::Time t = ros::Time::now();
tf::Transform base_to_laser_; 
tf::StampedTransform base_to_laser_tf;//Transform类的子类
try
{
	tf_listener_.waitForTransform(
		base_frame_, world_frame, t, ros::Duration(1.0));
	tf_listener_.lookupTransform (
		base_frame_, world_frame, t, base_to_laser_tf);
}
catch (tf::TransformException ex)
{
	ROS_WARN("Could not get initial transform from base to laser frame, %s", ex.what());
	return false;
}
base_to_laser_ = base_to_laser_tf;

// 发布点云
ros::NodeHandle nh_;
ros::Publisher  origin_cloud_publisher_;
origin_cloud_publisher_ = nh_.advertise<sensor_msgs::PointCloud2>("origin_cloud", 10);
sensor_msgs::PointCloud2 output_origin;
pcl::PointCloud<pcl::PointXYZ> pc_origin;
pcl::toROSMsg(pc_origin_, output_origin);
output_origin.header.frame_id = fixed_frame_;
origin_cloud_publisher_.publish(output_origin);






